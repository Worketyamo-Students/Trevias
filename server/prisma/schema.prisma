datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Utilisateur du système
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  phone        String?
  role         Role     @default(USER)  // USER, ADMIN, AGENCY, STAFF
  bookings     Booking[]
  packages     Package[]
  notifications Notification[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Rôles disponibles
enum Role {
  USER
  ADMIN
  AGENCY
  STAFF
}

/// Agences de voyage (Bus ou Train)
model Agency {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      AgencyType // BUS ou TRAIN
  tripsBus  BusTrip[]
  tripsTrain TrainTrip[]
  packages  Package[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AgencyType {
  BUS
  TRAIN
}

/// Trajet Bus
model BusTrip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  agencyId    String   @db.ObjectId
  agency      Agency   @relation(fields: [agencyId], references: [id])
  from        String
  to          String
  departureAt DateTime
  seats       Int
  price       Float
  bookings    Booking[]
}

/// Trajet Train
model TrainTrip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  agencyId    String   @db.ObjectId
  agency      Agency   @relation(fields: [agencyId], references: [id])
  from        String
  to          String
  departureAt DateTime
  seats       Int
  price       Float
  bookings    Booking[]
}

/// Réservation
model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  tripBusId String?  @db.ObjectId
  tripBus   BusTrip? @relation(fields: [tripBusId], references: [id])
  tripTrainId String? @db.ObjectId
  tripTrain  TrainTrip? @relation(fields: [tripTrainId], references: [id])
  seats     Int
  status    BookingStatus @default(PENDING)
  payment   Payment?
  createdAt DateTime @default(now())
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

/// Colis
model Package {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  agencyId  String   @db.ObjectId
  agency    Agency   @relation(fields: [agencyId], references: [id])
  description String
  weight     Float
  price      Float
  status     PackageStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum PackageStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}

/// Paiement
model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
bookingId String   @unique @db.ObjectId
  booking   Booking  @relation(fields: [bookingId], references: [id])
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum PaymentMethod {
  MOBILE_MONEY
  CARD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

/// Notifications
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
     